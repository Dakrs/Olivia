
<div id="warning">
    <h1 style="font-weight:500;">Speech Recognition Speech SDK not found (microsoft.cognitiveservices.speech.sdk.bundle.js missing).</h1>
</div>

<div id="content" style="display:none">
    <table width="100%">
        <tr>
            <td></td>
            <td><h1 style="font-weight:500;">Microsoft Cognitive Services Speech SDK JavaScript Quickstart</h1></td>
        </tr>
        
        <tr>
            <td></td>
            <td><button id="startRecognizeOnceAsyncButton">Start recognition</button></td>
        </tr>
        <tr>
            <td align="right" valign="top">Results</td>
            <td><textarea id="phraseDiv" style="display: inline-block;width:500px;height:200px"></textarea></td>
        </tr>
    </table>
</div>

<!-- Speech SDK reference sdk. -->
<script src="~/js/microsoft.cognitiveservices.speech.sdk.bundle.js"></script>

<!-- Speech SDK USAGE -->
<script>
    // status fields and start button in UI
    var phraseDiv;
    var startRecognizeOnceAsyncButton;

    // subscription key and region for speech services.
    var authorizationToken;
    var SpeechSDK;
    var recognizer;

    document.addEventListener("DOMContentLoaded", function () {
        startRecognizeOnceAsyncButton = document.getElementById("startRecognizeOnceAsyncButton");
        phraseDiv = document.getElementById("phraseDiv");

        startRecognizeOnceAsyncButton.addEventListener("click", function () {
            startRecognizeOnceAsyncButton.disabled = true;
            phraseDiv.innerHTML = "";

            // if we got an authorization token, use the token. Otherwise use the provided subscription key
            var speechConfig;
            if (authorizationToken) {
                speechConfig = SpeechSDK.SpeechConfig.fromAuthorizationToken("ec079ac7489c4b7ebe4f3b24c91b41f0", "westus");
            } else {
                speechConfig = SpeechSDK.SpeechConfig.fromSubscription("ec079ac7489c4b7ebe4f3b24c91b41f0", "westus");
            }

            speechConfig.speechRecognitionLanguage = "pt-PT";
            var audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
            recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);

            recognizer.recognizeOnceAsync(
                function (result) {
                    startRecognizeOnceAsyncButton.disabled = false;
                    var locationFinal;
                    var frase = String(result.text);
                    phraseDiv.innerHTML += frase;
                    var currentLocation = window.location.href;
                    if (frase.includes("menu")) {
                        locationFinal = currentLocation.substr(0, currentLocation.length - 5);
                        window.location.href = locationFinal;
                    } else if (frase.includes("desligar")) {
                        locationFinal = currentLocation.substr(0, currentLocation.length - 5);
                        locationFinal = locationFinal.concat("/Logout")
                        window.location.href = locationFinal;
                    }
                    phraseDiv.innerHTML += result.text;
                        

                    window.console.log(result);
                    recognizer.close();
                    recognizer = undefined;
                },
                function (err) {
                    startRecognizeOnceAsyncButton.disabled = false;
                    phraseDiv.innerHTML += err;
                    window.console.log(err);

                    recognizer.close();
                    recognizer = undefined;
                });
        });

        if (!!window.SpeechSDK) {
            SpeechSDK = window.SpeechSDK;
            startRecognizeOnceAsyncButton.disabled = false;

            document.getElementById('content').style.display = 'block';
            document.getElementById('warning').style.display = 'none';

            // in case we have a function for getting an authorization token, call it.
            if (typeof RequestAuthorizationToken === "function") {
                RequestAuthorizationToken();
            }
        }
    });
</script>